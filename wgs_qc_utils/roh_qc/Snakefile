configfile: 'config.yaml'

import os

isabl_sample_ids = [config['isabl_sample_id']]
isabl_sample_id = isabl_sample_ids[0]
input_bam = config['bam']
gtf_filename = config['gtf_filename']

intermediate_dir = config['intermediate_dir']
log_dir = config['log_dir']
results_dir = config['results_dir']

class Fasta:
    def __init__(self, ref_path):
        self.fasta = ref_path
        self.fai = self.fasta + '.fai'
        self.names = []
        self.lengths = []
        assert os.path.isfile(self.fasta)
        assert os.path.isfile(self.fai)

        # get chromosome info for 1~22 + X, Y only
        self.process_fai() # only_canonical=True

    def process_fai(self, only_canonical=True):
        for line in open(self.fai):
            field = line.rstrip().split('\t')
            name, length, cumlen, _a, _b = field
            if only_canonical and (name == 'MT' or 
                                   name.startswith('GL')):
                continue
            self.names.append(name)
            self.lengths.append(int(length))

def generate_intervals(ref, chromosomes, size=1000000): # FROM wgs package; bug workaround
    fasta = Fasta(ref)
    lengths = fasta.lengths
    names = fasta.references

    intervals = []

    for name, length in zip(names, lengths):
        if name not in chromosomes:
            continue
        for i in range(int((length / size) + 1)):
            start = str(int(i * size) + 1)
            end = str(int((i + 1) * size))
            intervals.append(name + "_" + start + "_" + end)

    return intervals

chromosomes = [str(x) for x in range(1, 23)] + ['X', 'Y']
interval_size = 1e7 # 1e9 to cover all chroms
intervals = generate_intervals(config['reference'], chromosomes, interval_size)


rule all:
    input: 
        os.path.join(results_dir, f'roh_qc.{isabl_sample_id}.pdf'),

rule samtools_germline:
    input: 
        bam=input_bam,
        ref=config['reference']
    output: 
        os.path.join(intermediate_dir, 
            'samtools_germline.{sample}.{interval}.vcf.gz')
    log: 
        os.path.join(log_dir, 
            'samtools_germline.{sample}.{interval}.vcf.gz.log')
    params:
        region = lambda wc: "{}:{}-{}".format(*wc.interval.split('_'))
    singularity: "docker://soymintc/roh_qc:0.0.1"
    shell: 
        "samtools mpileup -ugf {input.ref} -Q 20 -q 10 "
        "-r {params.region} {input.bam} 2> {log} | "
        "bcftools call -vmO z -o {output} &>> {log}"

rule bcftools_concat:
    input:
        expand(os.path.join(intermediate_dir, 
            'samtools_germline.{sample}.{interval}.vcf.gz'),
            sample=isabl_sample_ids,
            interval=intervals)
    output:
        os.path.join(intermediate_dir, 
            f'samtools_germline.{isabl_sample_id}.vcf.gz')
    log: 
        os.path.join(log_dir, 
            f'samtools_germline.{isabl_sample_id}.vcf.log')
    singularity: "docker://soymintc/roh_qc:0.0.1"
    shell: 
        "bcftools concat -O z -o {output} "
        "{input} 2> {log}"

rule bcftools_sort:
    input:
        os.path.join(intermediate_dir, 
            f'samtools_germline.{isabl_sample_id}.vcf.gz')
    output:
        os.path.join(intermediate_dir, 
            f'samtools_germline.{isabl_sample_id}.sorted.vcf.gz')
    log: 
        os.path.join(log_dir, 
            f'samtools_germline.{isabl_sample_id}.sorted.vcf.log')
    singularity: "docker://soymintc/roh_qc:0.0.1"
    shell: 
        "bcftools sort -m 4G -O z -o {output} -T tmp {input} 2> {log}"

rule bcftools_roh:
    input:
        os.path.join(intermediate_dir, 
            f'samtools_germline.{isabl_sample_id}.sorted.vcf.gz')
    output:
        os.path.join(results_dir, 
            f'samtools_germline.{isabl_sample_id}.roh.tsv')
    log: 
        os.path.join(log_dir, 
            f'samtools_germline.{isabl_sample_id}.roh.tsv.log')
    singularity: "docker://soymintc/roh_qc:0.0.1"
    shell: 
        "bcftools roh -G30 --AF-dflt 0.4 {input} "
        "> {output} 2> {log}"

rule plot_roh:
    input:
        os.path.join(results_dir, 
            f'samtools_germline.{isabl_sample_id}.roh.tsv')
    output:
        os.path.join(results_dir, 
            f'roh_qc.{isabl_sample_id}.pdf')
    log: 
        os.path.join(log_dir, 
            f'roh_qc.{isabl_sample_id}.log')
    singularity: "docker://soymintc/roh_qc:0.0.1"
    shell: 
        "python /juno/work/shah/users/chois7/packages/wgs_qc_utils/wgs_qc_utils/roh_qc/plot_roh.py " 
        #"python /usr/bin/plot_roh.py " 
        f"--roh {input} --sample {isabl_sample_id} "
        "--pdf {output} &> {log}"

