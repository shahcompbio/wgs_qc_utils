# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

configfile: 'config.yaml'

import os
import yaml
import pandas as pd

metadata = pd.read_csv(config['metadata'])

intermediate_dir = config['intermediate_dir']
gtf_filename = config['gtf_filename']

results_dir = config['results_dir']

tumor_sample_ids = metadata.query('target_sample_category != "NORMAL"')['target_sample'].unique()
sample_patient_ids = metadata.set_index('target_sample')['individual'].to_dict()
paths = metadata.set_index(['target_sample', 'app', 'file_type'])['path'].to_dict()

rule all:
    input:
        os.path.join(results_dir, 'segments.seg'),
        os.path.join(results_dir, 'cna.tsv')

def get_somatic_input_paths(wildcards):
    return {
        'remixt_cn': paths[(wildcards.tumour_sample_id, 'WGS-REMIXT-POSTPROCESS', 'remixt_cn')],
    }

rule classifycopynumber:
    input: unpack(get_somatic_input_paths)
    output: os.path.join(intermediate_dir, 'cn_change_{tumour_sample_id}.csv')
    singularity: "docker://shahlab/classifycopynumber"
    shell: 'classifycopynumber {gtf_filename} {output} --remixt_parsed_csv {input.remixt_cn} --sample_ids {wildcards.tumour_sample_id}'

rule add_sample_column:
    input: os.path.join(intermediate_dir, 'cn_change_{tumour_sample_id}.csv')
    output: os.path.join(intermediate_dir, 'cn_change_{tumour_sample_id}.sample.csv')
    singularity: "docker://shahlab/classifycopynumber"
    script: "scripts/add_sample_col.py"

rule merge_cn_change:
    input: expand(os.path.join(intermediate_dir, 'cn_change_{tumour_sample_id}.sample.csv'), tumour_sample_id=tumor_sample_ids)
    output: os.path.join(results_dir, 'cn_change.csv')
    singularity: "docker://amcpherson/filtermafs"
    script: "scripts/merge_csvs.py"

rule make_cbio_cna_table:
    input: os.path.join(results_dir, 'cn_change.csv')
    output: os.path.join(results_dir, 'cna.tsv')
    singularity: "docker://shahlab/classifycopynumber"
    script: "scripts/make_cbio_cna_table.py"

rule generate_segmental_copynumber:
    input: unpack(get_somatic_input_paths)
    output: os.path.join(intermediate_dir, 'segments_{tumour_sample_id}.csv')
    singularity: "docker://shahlab/classifycopynumber"
    script: "scripts/generate_segmental_copynumber.py"

rule merge_segmental_copynumber:
    input: expand(os.path.join(intermediate_dir, 'segments_{tumour_sample_id}.csv'), tumour_sample_id=tumor_sample_ids)
    output: os.path.join(results_dir, 'segments.seg')
    singularity: "docker://shahlab/classifycopynumber"
    script: "scripts/merge_csvs.py"

